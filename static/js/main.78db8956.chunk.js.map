{"version":3,"sources":["Components/ScoreBoard.js","Images/blue-candy.png","Images/green-candy.png","Images/orange-candy.png","Images/purple-candy.png","Images/red-candy.png","Images/yellow-candy.png","Images/blank.png","App.js","index.js"],"names":["ScoreBoard","score","className","candyColors","blueCandy","orangeCandy","purpleCandy","redCandy","yellowCandy","greenCandy","App","currentColorArrangement","setCurrentColorArrangement","useState","squareBeingDragged","setSquareBeingDragged","squareBeingReplaced","setSquareBeingReplaced","scoreDisplay","setScoreDisplay","checkForColumnOfFour","i","columnOfFour","width","decidedColor","isBlank","blank","every","square","forEach","checkForRowOfFour","rowOfFour","notValid","includes","checkForColumnOfThree","columnOfThree","checkForRowOfThree","rowOfThree","moveIntoSquareBelow","randomNumber","Math","floor","random","length","dragStart","e","target","dragDrop","dragEnd","squareBeingDraggedId","parseInt","getAttribute","squareBeingReplacedId","validMove","isAColumnOfFour","isARowOfFour","isAColumnOfThree","isARowOfThree","useEffect","randomColorArrangement","randomColor","push","createBoard","timer","setInterval","clearInterval","map","candyColor","index","src","alt","draggable","onDragStart","onDragOver","preventDefault","onDragEnter","onDragLeave","onDrop","onDragEnd","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.78db8956.chunk.js","sourcesContent":["const ScoreBoard = ({ score }) => {\r\n  return (\r\n    <div className=\"score-board\">\r\n      <h2>Score: {score}</h2>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ScoreBoard;\r\n","export default __webpack_public_path__ + \"static/media/blue-candy.73120c15.png\";","export default __webpack_public_path__ + \"static/media/green-candy.599f7016.png\";","export default __webpack_public_path__ + \"static/media/orange-candy.f106b2cd.png\";","export default __webpack_public_path__ + \"static/media/purple-candy.ae25b8a5.png\";","export default __webpack_public_path__ + \"static/media/red-candy.3658b37c.png\";","export default __webpack_public_path__ + \"static/media/yellow-candy.a3d87a9b.png\";","export default __webpack_public_path__ + \"static/media/blank.fbcb9179.png\";","import { useEffect, useState } from \"react\";\nimport ScoreBoard from \"./Components/ScoreBoard\";\nimport blueCandy from \"./Images/blue-candy.png\";\nimport greenCandy from \"./Images/green-candy.png\";\nimport orangeCandy from \"./Images/orange-candy.png\";\nimport purpleCandy from \"./Images/purple-candy.png\";\nimport redCandy from \"./Images/red-candy.png\";\nimport yellowCandy from \"./Images/yellow-candy.png\";\nimport blank from \"./Images/blank.png\";\n\nconst width = 8;\nconst candyColors = [\n  blueCandy,\n  orangeCandy,\n  purpleCandy,\n  redCandy,\n  yellowCandy,\n  greenCandy\n];\n\nconst App = () => {\n  const [currentColorArrangement, setCurrentColorArrangement] = useState([]);\n  const [squareBeingDragged, setSquareBeingDragged] = useState(null);\n  const [squareBeingReplaced, setSquareBeingReplaced] = useState(null);\n  const [scoreDisplay, setScoreDisplay] = useState(0);\n\n  const checkForColumnOfFour = () => {\n    for (let i = 0; i <= 39; i++) {\n      const columnOfFour = [i, i + width, i + width * 2, i + width * 3];\n      const decidedColor = currentColorArrangement[i];\n      const isBlank = currentColorArrangement[i] === blank;\n\n      if (\n        columnOfFour.every(\n          (square) =>\n            currentColorArrangement[square] === decidedColor && !isBlank\n        )\n      ) {\n        setScoreDisplay((score) => score + 4);\n        columnOfFour.forEach(\n          (square) => (currentColorArrangement[square] = blank)\n        );\n        return true;\n      }\n    }\n  };\n\n  const checkForRowOfFour = () => {\n    for (let i = 0; i < 64; i++) {\n      const rowOfFour = [i, i + 1, i + 2, i + 3];\n      const decidedColor = currentColorArrangement[i];\n      const notValid = [\n        5,\n        6,\n        7,\n        13,\n        14,\n        15,\n        21,\n        22,\n        23,\n        29,\n        30,\n        31,\n        37,\n        38,\n        39,\n        45,\n        46,\n        47,\n        53,\n        54,\n        55,\n        62,\n        63,\n        64\n      ];\n      const isBlank = currentColorArrangement[i] === blank;\n\n      if (notValid.includes(i)) continue;\n\n      if (\n        rowOfFour.every(\n          (square) =>\n            currentColorArrangement[square] === decidedColor && !isBlank\n        )\n      ) {\n        setScoreDisplay((score) => score + 4);\n        rowOfFour.forEach(\n          (square) => (currentColorArrangement[square] = blank)\n        );\n        return true;\n      }\n    }\n  };\n\n  const checkForColumnOfThree = () => {\n    for (let i = 0; i <= 47; i++) {\n      const columnOfThree = [i, i + width, i + width * 2];\n      const decidedColor = currentColorArrangement[i];\n      const isBlank = currentColorArrangement[i] === blank;\n\n      if (\n        columnOfThree.every(\n          (square) =>\n            currentColorArrangement[square] === decidedColor && !isBlank\n        )\n      ) {\n        setScoreDisplay((score) => score + 3);\n        columnOfThree.forEach(\n          (square) => (currentColorArrangement[square] = blank)\n        );\n        return true;\n      }\n    }\n  };\n\n  const checkForRowOfThree = () => {\n    for (let i = 0; i < 64; i++) {\n      const rowOfThree = [i, i + 1, i + 2];\n      const decidedColor = currentColorArrangement[i];\n      const notValid = [\n        6,\n        7,\n        14,\n        15,\n        22,\n        23,\n        30,\n        31,\n        38,\n        39,\n        46,\n        47,\n        54,\n        55,\n        63,\n        64\n      ];\n      const isBlank = currentColorArrangement[i] === blank;\n\n      if (notValid.includes(i)) continue;\n\n      if (\n        rowOfThree.every(\n          (square) =>\n            currentColorArrangement[square] === decidedColor && !isBlank\n        )\n      ) {\n        setScoreDisplay((score) => score + 3);\n        rowOfThree.forEach(\n          (square) => (currentColorArrangement[square] = blank)\n        );\n        return true;\n      }\n    }\n  };\n\n  const moveIntoSquareBelow = () => {\n    for (let i = 0; i <= 55; i++) {\n      const firstRow = [0, 1, 2, 3, 4, 5, 6, 7];\n      const isFirstRow = firstRow.includes(i);\n\n      if (isFirstRow && currentColorArrangement[i] === blank) {\n        let randomNumber = Math.floor(Math.random() * candyColors.length);\n        currentColorArrangement[i] = candyColors[randomNumber];\n      }\n\n      if (currentColorArrangement[i + width] === blank) {\n        currentColorArrangement[i + width] = currentColorArrangement[i];\n        currentColorArrangement[i] = blank;\n      }\n    }\n  };\n\n  const dragStart = (e) => {\n    setSquareBeingDragged(e.target);\n  };\n  const dragDrop = (e) => {\n    setSquareBeingReplaced(e.target);\n  };\n  const dragEnd = () => {\n    const squareBeingDraggedId = parseInt(\n      squareBeingDragged.getAttribute(\"data-id\")\n    );\n    const squareBeingReplacedId = parseInt(\n      squareBeingReplaced.getAttribute(\"data-id\")\n    );\n\n    currentColorArrangement[\n      squareBeingReplacedId\n    ] = squareBeingDragged.getAttribute(\"src\");\n    currentColorArrangement[\n      squareBeingDraggedId\n    ] = squareBeingReplaced.getAttribute(\"src\");\n\n    const validMoves = [\n      squareBeingDraggedId - 1,\n      squareBeingDraggedId - width,\n      squareBeingDraggedId + 1,\n      squareBeingDraggedId + width\n    ];\n\n    const validMove = validMoves.includes(squareBeingReplacedId);\n\n    const isAColumnOfFour = checkForColumnOfFour();\n    const isARowOfFour = checkForRowOfFour();\n    const isAColumnOfThree = checkForColumnOfThree();\n    const isARowOfThree = checkForRowOfThree();\n\n    if (\n      squareBeingReplacedId &&\n      validMove &&\n      (isARowOfThree || isARowOfFour || isAColumnOfFour || isAColumnOfThree)\n    ) {\n      setSquareBeingDragged(null);\n      setSquareBeingReplaced(null);\n    } else {\n      currentColorArrangement[\n        squareBeingReplacedId\n      ] = squareBeingReplaced.getAttribute(\"src\");\n      currentColorArrangement[\n        squareBeingDraggedId\n      ] = squareBeingDragged.getAttribute(\"src\");\n      setCurrentColorArrangement([...currentColorArrangement]);\n    }\n  };\n\n  const createBoard = () => {\n    const randomColorArrangement = [];\n    for (let i = 0; i < width * width; i++) {\n      const randomColor =\n        candyColors[Math.floor(Math.random() * candyColors.length)];\n      randomColorArrangement.push(randomColor);\n    }\n    setCurrentColorArrangement(randomColorArrangement);\n  };\n\n  useEffect(() => {\n    createBoard();\n  }, []);\n\n  useEffect(() => {\n    const timer = setInterval(() => {\n      checkForColumnOfFour();\n      checkForRowOfFour();\n      checkForColumnOfThree();\n      checkForRowOfThree();\n      moveIntoSquareBelow();\n      setCurrentColorArrangement([...currentColorArrangement]);\n    }, 100);\n    return () => clearInterval(timer);\n  }, [\n    checkForColumnOfFour,\n    checkForRowOfFour,\n    checkForColumnOfThree,\n    checkForRowOfThree,\n    moveIntoSquareBelow,\n    currentColorArrangement\n  ]);\n\n  return (\n    <div className=\"app\">\n      <div className=\"game\">\n        {currentColorArrangement.map((candyColor, index) => (\n          <img\n            key={index}\n            src={candyColor}\n            alt={candyColor}\n            data-id={index}\n            draggable={true}\n            onDragStart={dragStart}\n            onDragOver={(e) => e.preventDefault()}\n            onDragEnter={(e) => e.preventDefault()}\n            onDragLeave={(e) => e.preventDefault()}\n            onDrop={dragDrop}\n            onDragEnd={dragEnd}\n          />\n        ))}\n      </div>\n      <ScoreBoard score={scoreDisplay} />\n    </div>\n  );\n};\n\nexport default App;\n","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}